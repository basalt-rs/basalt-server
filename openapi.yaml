openapi: 3.1.0
info:
  title: basalt-server
  description: ''
  license:
    name: ''
  version: 0.1.0
paths:
  /auth/login:
    post:
      tags:
      - auth
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: Session cookie has been set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Incorrect credentials provided
  /auth/logout:
    post:
      tags:
      - auth
      operationId: logout
      responses:
        '200':
          description: User has been logged out
        '401':
          description: User was not logged in
  /auth/me:
    get:
      tags:
      - auth
      description: Get information about the current user
      operationId: me
      responses:
        '200':
          description: User is signed in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Auth token is expired
  /questions:
    get:
      operationId: get_all
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionResponse'
  /questions/{id}:
    get:
      operationId: get_specific_question
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
        '404':
          description: Question Not Found
  /ws:
    get:
      tags:
      - ws
      operationId: connect_websocket
      responses:
        '200':
          description: connected to websocket
components:
  schemas:
    LoginRequest:
      type: object
      required:
      - username
      - password
      properties:
        password:
          type: string
        username:
          type: string
    LoginResponse:
      type: object
      required:
      - token
      - role
      properties:
        role:
          $ref: '#/components/schemas/Role'
        token:
          type: string
    QuestionResponse:
      type: object
      required:
      - title
      - tests
      properties:
        description:
          type:
          - string
          - 'null'
        languages:
          type:
          - array
          - 'null'
          items:
            type: string
          uniqueItems: true
        tests:
          type: array
          items:
            $ref: '#/components/schemas/TestResponse'
        title:
          type: string
    Role:
      type: string
      enum:
      - competitor
      - host
    TestResponse:
      type: object
      required:
      - input
      - output
      properties:
        input:
          type: string
        output:
          type: string
    User:
      type: object
      required:
      - username
      - role
      properties:
        role:
          $ref: '#/components/schemas/Role'
        username:
          type: string
