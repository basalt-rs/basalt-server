# several checks:
# - fmt: checks that the code is formatted according to rustfmt
# - clippy: checks that the code does not contain any clippy warnings
# - doc: checks that the code can be documented without errors
# - hack: check combinations of feature flags
# - msrv: check that the msrv specified in the crate is correct
permissions:
    contents: read
# This configuration allows maintainers of this repo to create a branch and pull request based on
# the new branch. Restricting the push trigger to the main branch ensures that the PR only gets
# built once.
on:
    workflow_dispatch:
    push:
        tags:
            - "v[0-9]+.[0-9]+.[0-9]+.?*"
# If new code is pushed to a PR branch, then cancel in progress workflows for that PR. Ensures that
# we don't waste CI time, and returns results quicker https://github.com/jonhoo/rust-ci-conf/pull/5
concurrency:
    group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
    cancel-in-progress: true
name: check
jobs:
    get-version:
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.extract.outputs.version }}
        steps:
            - name: Extract version from ref
              id: extract
              run: |
                  VERSION="${GITHUB_REF_NAME#v}"
                  echo "version=$VERSION" >> $GITHUB_OUTPUT

    push-containers:
        runs-on: blacksmith-4vcpu-ubuntu-2404
        needs: [get-version]
        permissions:
            contents: read
            packages: write
        strategy:
            matrix:
                include:
                    - dockerfile: Dockerfile
                      tags:
                          - ghcr.io/${{ github.repository_owner }}/basalt-server:latest
                          - ghcr.io/${{ github.repository_owner }}/basalt-server:__VERSION__
                          - ghcr.io/${{ github.repository_owner }}/basalt-server:latest-full
                          - ghcr.io/${{ github.repository_owner }}/basalt-server:__VERSION__-full
                    - dockerfile: Dockerfile.scripting
                      tags:
                          - ghcr.io/${{ github.repository_owner }}/basalt-server:latest-scripting
                          - ghcr.io/${{ github.repository_owner }}/basalt-server:__VERSION__-scripting
                    - dockerfile: Dockerfile.webhooks
                      tags:
                          - ghcr.io/${{ github.repository_owner }}/basalt-server:latest-webhooks
                          - ghcr.io/${{ github.repository_owner }}/basalt-server:__VERSION__-webhooks
        env:
            VERSION: ${{ needs.get-version.outputs.version }}
        steps:
            - uses: actions/checkout@v4
            - name: Replace version in tags
              id: tags
              run: |
                  VERSION="${{ needs.get-version.outputs.version }}"
                  TAGS_JSON=$(jq -nc --argjson tags "$(jq -c '.tags' <<< '${{ toJson(matrix) }}')" '$tags')
                  TAGS=$(echo "$TAGS_JSON" | jq -r '.[]' | sed "s/__VERSION__/$VERSION/g")
                  echo "tags<<EOF" >> $GITHUB_OUTPUT
                  echo "$TAGS" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT
            - name: Set up QEMU (for ARM builds)
              uses: docker/setup-qemu-action@v3
            - name: Setup Docker Builder
              uses: useblacksmith/setup-docker-builder@v1
            - name: Log in to GHCR
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            # Use QEMU to build images for both amd64 and arm64
            - name: Build and push Docker image
              # uses: docker/build-push-action@v6
              uses: useblacksmith/build-push-action@v2
              with:
                  context: .
                  file: ./containers/${{ matrix.dockerfile }}
                  platforms: linux/amd64,linux/arm64
                  push: true
                  tags: ${{ steps.tags.outputs.tags }}
